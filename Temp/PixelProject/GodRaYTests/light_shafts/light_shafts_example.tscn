[gd_scene load_steps=11 format=4 uid="uid://fpmpy2gic58s"]

[ext_resource type="LightmapGIData" uid="uid://cwad5k10jt5r" path="res://Temp/PixelProject/GodRaYTests/light_shafts/light_shafts_example.lmbake" id="1_qtan3"]
[ext_resource type="Material" uid="uid://dqgh45ow7ygkh" path="res://Temp/PixelProject/GodRaYTests/light_shafts/default_light_shaft.material" id="2_otrt7"]
[ext_resource type="Script" uid="uid://c1u7eyhigk821" path="res://Temp/PixelProject/GodRaYTests/light_shafts/local_transform_listener.gd" id="4_fac11"]

[sub_resource type="Environment" id="Environment_t70p2"]
background_mode = 1
ambient_light_source = 1

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_t70p2"]
albedo_color = Color(0.590909, 0.576258, 0.510331, 1)

[sub_resource type="ArrayMesh" id="ArrayMesh_bed4n"]
lightmap_size_hint = Vector2i(566, 566)
_surfaces = [{
"aabb": AABB(-5, 0, -5, 10, 4, 10),
"attribute_data": PackedByteArray("FlsZP8h72D7nvlo+XctSPrc9Az949LQ+81Q7PkkHbD7brQg/dWjTPnsOQz41ZlY+NM71PnHVGD++fC8+o3MTPgAAAAAAAIA/lJRnOnOTZzrbrQg/rkgaP3sOQz5MZBE+iafrPnI4ET8NRyg+LEQePsA5xT5+CBM/y/sMPgCxGz4gutM+Vnb9Pn5IFz7Dhzg+hMbDPj6c6j4f9As+fetFPkjhej/QzEw9oKOyPtMjVj8AAIA/AAAAAI9Gtj7D+Fc/ANejPNDMTD0f1wI80yNWPwAAAAAAAAAAB2g3P49Gtj4AAAAAAACAPwdoNz9zk2c6AACAPwAAgD9J/bg+c5NnOgDXozwzM3M/H9cCPOAqNT8AAAAAAACAP3OTZzrwVTM/SOF6PzMzcz+go7I+4Co1PwAAgD8AAAAAZMM4Pwdo9z4AAAAAAAAAADhmXT8HaPc+AACAPwAAgD9kwzg/hCoDPgAAAAAAAAAAc5NnOsP4Vz8AAAAAAAAAAGTDOD8Rl1s/AAAAAAAAgD84Zl0/EZdbPwAAgD8AAIA/OGZdP6+tAD8AAIA/AAAAAEn9uD6PRrY+AACAPwAAAACPRrY+j0a2Psy0HT9mywc/6+xgPuSnKz7QP+E+WXrIPiXjID6NKV4+1RPYPovOxz5/Xxo+k6NePgAAAAAAAIA/OGZdP4QqAz40zvU+aPvJPr58Lz4RGF0+AAAAAAAAAABzk2c6j0a2PgAAgD8AAIA/B2g3PzhmXT8AAIA/AAAAAEn9uD44Zl0/AAAAAAAAAABJ/bg+ZMM4PwAAgD8AAIA/j0a2PpSUZzoL7g8/4LEKPzFbTT41iSc+AACAPwAAgD+PRrY+8FUzPwAAAAAAAIA/B2g3P2TDOD8AAIA/AAAAAGTDOD+vrQA/AAAAAAAAAACVwV4/KLxQPwAAgD8AAAAAG8Z/Pyi8UD8AAAAAAAB4P5XBXj90gPY+xF8WP8+M0T6iwiw++JENP5+1ED/907E+ZyAXPhyeCz/hvic/RtbWPqtdMD7cjhM/BQAAPQAAgD8rg70+Sf24PsRfFj8KYRs/NshxPviRDT8AAIA/AACAPyuDvT6T+jE//0YsP4seCD83g1c+vx4VPwAAgD8AAAAADtDuPJP6MT+pFPE+JnfFPtKEJD5kSQM/BQAAPQAAAAAY0O48Sv24PgUAAD0AAAAA5TnAPkn9uD4AAIA/AAAAAOCYNT9J/bg+AACAPwAAgD/gmDU/uckzPxAGCD83u8c+ahAmPqqfCD8AAAAABQAAPaZrqz6VwV4/AACAPwUAAD2ma6s+G8Z/PwAAAAAAAIA/c5NnOpXBXj+MjOw+RVv9PqeiSj5zgQI/fnHdPoPTEz/0emc+8s3/Psnu2z4WuOk+OT49PqZI/z4AAIA/AAB4PxvGfz90gPY+AACAPwAAAACVwV4/j0a2PgAAgD8AAIA/G8Z/P49Gtj4AAAAAAAAAAJXBXj+qDHY8EAYIP1XeGT/CuG8+qp8IP5e8Aj8h8BE/pOdkPiHNBj8AAAAAAACAPxvGfz+qDHY8TO0dP/QjCz8dols+ciwQPwUAAD0AAIA/5TnAPrnJMz8AAIA/AACAP3OTZzobxn8/"),
"format": 34359742519,
"index_count": 177,
"index_data": PackedByteArray("AAABAAIAAwAEAAUABgAEAAMABwAEAAYABwAIAAQABAAIAAkACgALAAwADQAOAA8AEAARABIAEwAUABUAEAAWABEAFwAYABkADQAPABoAGwAAABwAGwABAAAAHQAbAB4AFAAfABUAAQAbAB0AAQAdACAAIQAJAB4ABAAJACEADAALABYADAAWABAAHgAbACEAIgAjACQAJQAcACYABQAlACYAGwAcACUABQAEACUAEgARACcACwASACcACwAKABIAJAAoACIAFwAZACkAKgArACwALQAuAC8AMAAxADIAMwAvADQANAA1ADYAMwA0ADIALwAuADQALgA1ADQANwA4ADkAOgA1AC4AOwA8AD0APgA/ADYAQAA+ADYANgA1AEAAQQAsACsAQgBDAEQAMABFADEARgBFADAAMAA/AEYAQwBHAEQAMgAxAEgASAAzADIAOQBJADcASgA9ADwAPwAwADYA"),
"material": SubResource("StandardMaterial3D_t70p2"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 75,
"vertex_data": PackedByteArray("GJVFPwAAgEDcjn2/1Jy7PwAAgECepAG+uPVePwAAgEAgla2+aFZ4vwAAgEDv40s+AACgwAAAgEAAAKBAZGuDvwAAgEAgla2+cDQsvwAAgECjdMs+6FQ+vwAAgECf75I/AAVLPQAAgEBeXV0/kOXVPgAAgEC3j5Y/mpmZwDMzc0AAAKBAAACgwAAAgEAAAKBAmpmZQDMzc0AAAKBAAACgwAAAAAAAAKBAAACgQAAAAAAAAKBAAACgQAAAAAAAAKDAmpmZQNDMTD4AAKBAAACgQAAAAAAAAKBAmpmZwNDMTD4AAKBAAACgQAAAAAAAAKBAAACgQAAAgEAAAKBAAACgQAAAAAAAAKDAAACgQAAAgEAAAKBAAACgQAAAAAAAAKDAAACgQAAAgEAAAKDAAACgwAAAgEAAAKDAAACgwAAAAAAAAKDAAACgQAAAgEAAAKDAAOSbvgAAgED+h5S/Ic6KPwAAgEDvwBk/pHuMPwAAgEDVnEc/AACgQAAAgEAAAKDAfAuHPwAAgEDv40s+AACgQAAAgEAAAKBAAACgwAAAAAAAAKBAAACgwAAAAAAAAKDAAACgwAAAgEAAAKDAAACgwAAAgEAAAKDAgOXVvgAAgEBwTB+/AACgwAAAAAAAAKBAAACgwAAAgEAAAKBAAACgwAAAAAAAAKDAmpmZwDMzc0CamYnAmpmZwNDMTD6amYnAmpmZwDMzc0AAAKBAuPVePzMzc0Agla2+1Jy7PzMzc0CdpAG+GJVFPzMzc0Dcjn2/mpmZwDMzc0AAAKBAZGuDvzMzc0Agla2+mpmZwDMzc0CamYnAAOSbvjMzc0D+h5S/mpmZQDMzc0CamYnApHuMPzMzc0DVnEc/mpmZQDMzc0AAAKBAmpmZwNDMTD4AAKBAmpmZwNDMTD6amYnAmpmZQNDMTD6amYnAfAuHPzMzc0Dw40s+mpmZQDMzc0AAAKBAmpmZQNDMTD4AAKBAmpmZQDMzc0CamYnAAAVLPTMzc0BeXV0/6FQ+vzMzc0Cf75I/kOXVPjMzc0C3j5Y/mpmZwNDMTD4AAKBAmpmZwNDMTD6amYnAmpmZwDMzc0CamYnAmpmZQNDMTD6amYnAaFZ4vzMzc0Dw40s+cDQsvzMzc0CjdMs+mpmZQDMzc0CamYnAgOXVvjMzc0BwTB+/mpmZQNDMTD4AAKBAmpmZQNDMTD6amYnAAID/////AAAAgP////8AAACA/////wAAAID/////AAAAgP////8AAACA/////wAAAID/////AAAAgP////8AAACA/////wAAAID/////AAD/f/9/AAD/P/9//38AAP8//3//fwAA/z8AgAAA//8AAACAAAD//wAAAIAAAP//AAD/f/9/AAD/P/9//38AAP8//3//fwAA/z///wCA/3/+f///AID/f/5///8AgP9//n//f/9/AAD/P/////8AAP8//////wAA/z//////AAD/PwCAAAD//wAAAID/////AAAAgP////8AAACA/////wAAAID/////AAD//wCA/3/+fwCA/////wAAAID/////AAAAAACA/3/+fwAAAID/f/5/AAAAgP9//n8AgP////8AAACA/////wAA/3//fwAA/z8AAACA/3/+f/////8AAP8///8AgP9/AID//wCA/38AgP//AID/fwCAAIAAAP///v8AgAAA/////wCAAAD/////AIAAAP////8AgAAA/////wCAAAD/////AIAAAP////8AgAAA/////wCAAAD/////AIAAAP////8AgP///////wCA////////AID///////8AgAAA///+/wAAAID/fwCAAAAAgP9/AIAAAACA/38AgACAAAAAAP7/AIAAAAAA/v8AgAAAAAD+////AID/fwCA/3//fwAA/7//f/9/AAD/v/9//38AAP+/AIAAAP////8AgAAAAAD+//9//38AAP+/AIAAAP////8AgP///////wAAAID/fwCA")
}, {
"aabb": AABB(-1.02671, 3.8, -1.1604, 2.49244, 0.2, 2.33666),
"attribute_data": PackedByteArray("gME2PcVObD5kwzg/CxyzPYDBNj1HxYM+ZMM4P1OVkj3IFhQ+xU5sPlUGOz8JHLM9gME2PRQ7sT4hQWg/Mut0P8gWFD5P7MQ+vJBgP0Gocj/IFhQ+FDuxPiFBaD9BqHI/gME2PZ7YiT6CUOU+IUFoP8gWFD7ZiZ0+ocrgPryQYD/IFhQ+ntiJPqHK4D4hQWg/gME2PdmJnT6CUOU+vJBgP8gWFD6e2Ik+VQY7PxgShD2AwTY9ntiJPmTDOD8YEoQ9yBYUPoqd2D4a2XA/07VVP4DBNj1P7MQ+CxxzPzhmXT+AwTY9ip3YPgsccz/TtVU/yBYUPk/sxD4a2XA/OGZdP4DBNj2Kndg+BLR7P5XBXj+AwTY9xU7sPgS0ez+t02I/yBYUPoqd2D709n0/lcFeP8gWFD7FTuw+9PZ9P63TYj/IFhQ+ip3YPvT2fT+VwV4/gME2PcVO7D4EtHs/rdNiP4DBNj3FTuw+rOZTP/JCAjyAwTY9AAAAP6zmUz9GSf08yBYUPsVO7D6cKVY/8UICPMgWFD7ZiZ09K5YuPifPQT+AwTY92YkdPeyhNz5lsEc/gME2PdmJnT3soTc+J89BP4DBNj3ZiR09RVwuP4CJeD/IFhQ+2YkdPVQZLD+AiXg/gME2PQAAAABFXC4/GtlwP4DBNj1P7MQ+vJBgPzLrdD+AwTY9xU5sPgdoNz+9fW8/yBYUPsVObD4XJTU/vX1vP8gWFD5P7EQ+FyU1P3+caT/IFhQ+xU7sPazmUz9v32s/gME2PdmJnT2cKVY/vJBgP4DBNj3FTuw9nClWP2/faz/IFhQ+FDuxPsExaz2yYTw/gME2PdmJnT5lsIc98UJCP4DBNj0UO7E+ZbCHPbJhPD/IFhQ+2YmdPsExaz3xQkI/yBYUPtmJHT0qli4+ZbBHP8gWFD4AAAAAVBksPxrZcD+AwTY9T+xEPgdoNz9/nGk/yBYUPk/sRD5/nGk/5TnAPsgWFD7ZiR0+vX1vP+U5wD6AwTY9T+xEPn+caT/Gv8Q+yBYUPgAAAD+cKVY/Rkn9PMgWFD7FTuw+nClWP/FCAjyAwTY9AAAAP6zmUz9GSf08gME2PdmJHT69fW8/xr/EPsgWFD7ZiZ09rOZTP7yQYD/IFhQ+2YkdPm7yXD/UomQ/gME2PcVO7D1fNV8/bvJcP4DBNj3ZiR0+XzVfP9SiZD/IFhQ+xU7sPW7yXD9u8lw/"),
"format": 34359742519,
"index_count": 81,
"index_data": PackedByteArray("AAABAAIAAwAEAAUABgAHAAgABwAGAAkACgABAAsADAANAA4ADQAMAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsAHAAdAB4ABAADAB8AAQAKAAIAIAAhACIAIwAkACUAJgAnACgAJwAmACkAGgAZACoAHQArAB4ALAAgACIALQAuAC8AMAAxADIAMwAvAC4AJAAjADQANQA2ADcANgA1ADgA"),
"material": SubResource("StandardMaterial3D_t70p2"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 57,
"vertex_data": PackedByteArray("fAuHPwAAgEDv40s+Ic6KPwAAgEDvwBk/fAuHPzMzc0Dw40s+AAVLPQAAgEBeXV0/6FQ+vzMzc0Cf75I/AAVLPTMzc0BeXV0/pHuMPwAAgEDVnEc/kOXVPjMzc0C3j5Y/pHuMPzMzc0DVnEc/kOXVPgAAgEC3j5Y/pHuMPzMzc0DVnEc/pHuMPwAAgEDVnEc/cDQsvzMzc0CjdMs+6FQ+vwAAgECf75I/cDQsvwAAgECjdMs+6FQ+vzMzc0Cf75I/cDQsvwAAgECjdMs+aFZ4vwAAgEDv40s+cDQsvzMzc0CjdMs+aFZ4vzMzc0Dw40s+cDQsvzMzc0CjdMs+aFZ4vwAAgEDv40s+aFZ4vwAAgEDv40s+ZGuDvwAAgEAgla2+aFZ4vzMzc0Dw40s+AOSbvjMzc0D+h5S/gOXVvgAAgEBwTB+/AOSbvgAAgED+h5S/gOXVvgAAgEBwTB+/gOXVvjMzc0BwTB+/ZGuDvwAAgEAgla2+6FQ+vwAAgECf75I/fAuHPwAAgEDv40s+fAuHPzMzc0Dw40s+1Jy7PzMzc0CdpAG+GJVFPzMzc0Dcjn2/AOSbvgAAgED+h5S/GJVFPwAAgEDcjn2/AAVLPTMzc0BeXV0/kOXVPgAAgEC3j5Y/AAVLPQAAgEBeXV0/kOXVPjMzc0C3j5Y/gOXVvjMzc0BwTB+/ZGuDvzMzc0Agla2+1Jy7PwAAgECepAG+1Jy7PzMzc0CdpAG+uPVePzMzc0Agla2+1Jy7PwAAgECepAG+ZGuDvzMzc0Agla2+aFZ4vzMzc0Dw40s+ZGuDvwAAgEAgla2+uPVePwAAgEAgla2+AOSbvjMzc0D+h5S/uPVePzMzc0Agla2+GJVFPwAAgEDcjn2/uPVePwAAgEAgla2+GJVFPzMzc0Dcjn2/uQj/f/9//n+5CP9//3/+f7kI/3//f/5/AABP3v9//n8AAE/e/3/+fwAAT97/f/5/AADW0P9//n8AANbQ/3/+fwAA1tD/f/5/AADW0P9//n+5CP9//3/+f7kI/3//f/5/9vT/f/9//n/29P9//3/+f/b0/3//f/5/9vT/f/9//n///8vM/3/+f///y8z/f/5////LzP9//n///8zM/3/+f///zMz/f/5////MzP9//n///zGM/3/+f///MYz/f/5///8xjP9//n+86f9//3/+f7zp/3//f/5/vOn/f/9//n+hqP9//3/+f6Go/3//f/5/oaj/f/9//n8AAE/e/3/+fwAAYsf/f/5/AABix/9//n8AAGLH/3/+f4tu/3//f/5/i27/f/9//n+Lbv9//3/+f///VMX/f/5///9Uxf9//n///1TF/3/+f///VMX/f/5/vOn/f/9//n+hqP9//3/+fwAAYsf/f/5/UF7/f/9//n9QXv9//3/+f1Be/3//f/5///8wjP9//n///zCM/3/+f///MIz/f/5/UF7/f/9//n+Lbv9//3/+f+cQ/3//f/5/5xD/f/9//n/nEP9//3/+f+cQ/3//f/5/")
}]

[sub_resource type="ArrayMesh" id="ArrayMesh_tgovr"]
_surfaces = [{
"aabb": AABB(-4.38416, -4.34668, -1.62554, 4.76826, 4.34673, 3.54644),
"attribute_data": PackedByteArray("//9/fwAAAAAAAIA///9/fwAAAAAAAAAA//9/f2ypoD0AAIA///9/f2ypoD0AAAAA//9/f8/sEj4AAIA///9/f8/sEj4AAAAA//9/fy8xiz4AAIA///9/fy8xiz4AAAAA//9/fxR1sz4AAIA///9/fxR1sz4AAAAA//9/f/Mg2T4AAIA///9/f/Mg2T4AAAAA//9/fxVQ+T4AAIA///9/fxVQ+T4AAAAA//9/f/nHDT8AAIA///9/f/nHDT8AAAAA//9/f7W7JT8AAIA///9/f7W7JT8AAAAA//9/f0ZwND8AAIA///9/f0ZwND8AAAAA//9/f4X/TT8AAIA///9/f4X/TT8AAAAA//9/f0WTZD8AAIA///9/f0WTZD8AAAAA//9/fzo/bz8AAIA///9/fzo/bz8AAAAA//9/fwEAgD8AAIA///9/fwEAgD8AAAAA"),
"format": 34359742495,
"index_count": 78,
"index_data": PackedByteArray("AAABAAIAAgABAAMAAgADAAQABAADAAUABAAFAAYABgAFAAcABgAHAAgACAAHAAkACAAJAAoACgAJAAsACgALAAwADAALAA0ADAANAA4ADgANAA8ADgAPABAAEAAPABEAEAARABIAEgARABMAEgATABQAFAATABUAFAAVABYAFgAVABcAFgAXABgAGAAXABkAGAAZABoAGgAZABsA"),
"material": ExtResource("2_otrt7"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 28,
"vertex_data": PackedByteArray("nogKwAAAOTjO9BO/oL8sPs6OgMDH5xu/xPAVwAAAOThY24Y9YPGCvVRegcASi5E++dT+vwAAOTi4oPw+rKfEPsFofsCtB18/zo4zwAAAOTj/dJw/pN8vv5qMgsAYmfI/ZPRYwAAAOTh4KWU/i8G5vzTrhcCFIro/4DR7wAAAOTiDR5w/OEALwGTlh8BA4PU/psh5wAAAOTiBpS8/xKcIwMSciMDY25U/EUuMwAAAOTipS8M+CD8ywAgYi8B8cz8/MxuJwAAAOTipbdG+9TcpwLIWi8Amkr6+Em9zwAAAOTh/Lv++pO3+v5TliMCOZf++6lRhwAAAOTjsa6a/denOvzI1h8CkEdC/KmU+wAAAOTimz0i/4D1jv6DFhMCQDma/NYMowAAAOTjtO2G/+Cnhvlb5gsAS1oO/nogKwAAAOTjO9BO/oL8sPs6OgMDH5xu/AAD5mnZmlrwAAPmadmaWvIADAIB+g/K/gAMAgH6D8r9sGQCAOpj+vGwZAIA6mP681yb/f02ihbjXJv9/TaKFuL0a/39Wmaa8vRr/f1aZprxeHv9/R5yZu14e/39HnJm7IxP/f6WSW74jE/9/pZJbvj4K/38sio2/Pgr/fyyKjb8AACeL73R3vwAAJ4vvdHe/AADTjmRxCr8AANOOZHEKvwAAhKKaYDO6AACEoppgM7oAALWarmaovAAAtZquZqi8AAAOoGpiDbsAAA6gamINuwAA+Zp2Zpa8AAD5mnZmlrw=")
}]

[sub_resource type="GDScript" id="GDScript_pnruy"]
script/source = "@tool
class_name LightShaft3D
extends MeshInstance3D


const LocalTransformListener = preload(\"uid://c1u7eyhigk821\")

@export var outline: Path3D:
	get: return outline
	set(value):
		if value == outline:
			return
		if is_instance_valid(outline):
			outline.disconnect(\"local_transform_changed\", _rebuild)
			if is_instance_valid(outline.curve):
				outline.curve.changed.disconnect(_rebuild)
		outline = value
		if is_node_ready():
			_rebuild()
		if is_instance_valid(outline):
			outline.connect(\"local_transform_changed\", _rebuild)
			if is_instance_valid(outline.curve):
				outline.curve.changed.connect(_rebuild)
@export var origin: Marker3D:
	get: return origin
	set(value):
		if value == origin:
			return
		if is_instance_valid(origin):
			origin.disconnect(\"local_transform_changed\", _rebuild)
		origin = value
		if is_node_ready():
			_rebuild()
		if is_instance_valid(origin):
			origin.connect(\"local_transform_changed\", _rebuild)
@export var length: float = 2.0:
	get: return length
	set(value):
		if value == length:
			return
		length = value
		if is_node_ready():
			_rebuild()
@export var spread: bool = true:
	get: return spread
	set(value):
		if value == spread:
			return
		spread = value
		if is_node_ready():
			_rebuild()
@export var color: Color = Color(1, 1, 0.5, 0.5):
	get: return color
	set(value):
		if value == color:
			return
		color = value
		if is_node_ready():
			_rebuild()
@export var uv_tile_count: int = 1.0:
	get: return uv_tile_count
	set(value):
		if value == uv_tile_count:
			return
		uv_tile_count = value
		if is_node_ready():
			_rebuild()


func _ready() -> void:

	if not is_instance_valid(outline) or not is_instance_valid(origin) or not is_instance_valid(mesh):
		_rebuild()


func _rebuild() -> void:

	if not is_node_ready():
		return
	if Engine.is_editor_hint() and EditorInterface.get_edited_scene_root() != owner:
		return

	if not is_instance_valid(outline):
		var new_outline = Path3D.new()
		new_outline.set_script(LocalTransformListener)
		new_outline.name = \"outline\"
		new_outline.curve = Curve3D.new()
		new_outline.curve.clear_points()
		new_outline.curve.add_point(Vector3(-1, 0, -1))
		new_outline.curve.add_point(Vector3(1, 0, -1))
		new_outline.curve.add_point(Vector3(1, 0, 1))
		new_outline.curve.add_point(Vector3(-1, 0, 1))
		new_outline.curve.closed = true
		add_child(new_outline)
		new_outline.owner = owner
		outline = new_outline

	if not is_instance_valid(origin):
		var new_origin = Marker3D.new()
		new_origin.set_script(LocalTransformListener)
		new_origin.name = \"origin\"
		new_origin.transform = Transform3D(Basis(Vector3.RIGHT, deg_to_rad(-90)), Vector3(0, 1, 0))
		add_child(new_origin)
		new_origin.owner = owner
		origin = new_origin

	if not is_instance_valid(mesh):
		mesh = ArrayMesh.new()

	var verts: PackedVector3Array
	var normals: PackedVector3Array
	var colors: PackedColorArray
	var uvs: PackedVector2Array
	var indices: PackedInt32Array

	var origin_pos := to_local(origin.global_position)
	var dir_from_origin := -origin_pos.normalized()
	var outline_length := outline.curve.get_baked_length()

	for i in outline.curve.point_count + 1:
		var p := to_local(outline.to_global(outline.curve.get_point_position(i % outline.curve.point_count)))
		verts.append(p)
		var dir := (p - origin_pos).normalized() if spread else dir_from_origin
		verts.append(p + dir * length)
		var n := p.normalized()
		normals.append(n)
		normals.append(n)

	var prev_p := verts[0]
	var dist: float = 0.0
	for i in verts.size() / 2:
		var p := verts[i * 2]
		dist += prev_p.distance_to(p)
		var u := dist / outline_length * uv_tile_count
		uvs.append(Vector2(u, 1))
		uvs.append(Vector2(u, 0))
		prev_p = p

	for i in outline.curve.point_count:
		var b := i * 2
		indices.append(b + 0)
		indices.append(b + 1)
		indices.append(b + 2)
		indices.append(b + 2)
		indices.append(b + 1)
		indices.append(b + 3)

	colors.resize(verts.size())
	colors.fill(color)

	var arrays: Array
	arrays.resize(Mesh.ARRAY_MAX)
	arrays[Mesh.ARRAY_VERTEX] = verts
	arrays[Mesh.ARRAY_NORMAL] = normals
	arrays[Mesh.ARRAY_COLOR] = colors
	arrays[Mesh.ARRAY_TEX_UV] = uvs
	arrays[Mesh.ARRAY_INDEX] = indices

	var old_mat: Material
	if mesh.get_surface_count() > 0:
		old_mat = mesh.surface_get_material(0)
		mesh.clear_surfaces()
	mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
	if old_mat:
		mesh.surface_set_material(0, old_mat)
	else:
		mesh.surface_set_material(0, load(\"uid://dqgh45ow7ygkh\"))
"

[sub_resource type="Curve3D" id="Curve3D_tgovr"]
closed = true
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -1.03301, 4.41074e-05, -0.360583, 0, 0, 0, 0, 0, 0, -0.419923, 4.41074e-05, -0.62586, 0, 0, 0, 0, 0, 0, -0.307917, 4.41074e-05, -1.1682, 0, 0, 0, 0, 0, 0, 0.770875, 4.41074e-05, -0.991352, 0, 0, 0, 0, 0, 0, 0.88288, 4.41074e-05, -0.331108, 0, 0, 0, 0, 0, 0, 1.47238, 4.41074e-05, -0.118886, 0, 0, 0, 0, 0, 0, 1.04205, 4.41074e-05, 0.199446, 0, 0, 0, 0, 0, 0, 1.10689, 4.41074e-05, 0.765369, 0, 0, 0, 0, 0, 0, 0.428962, 4.41074e-05, 1.18392, 0, 0, 0, 0, 0, 0, 0.0575748, 4.41074e-05, 0.865585, 0, 0, 0, 0, 0, 0, -0.74415, 4.41074e-05, 1.14855, 0, 0, 0, 0, 0, 0, -0.6852, 4.41074e-05, 0.399877, 0, 0, 0, 0, 0, 0, -0.974056, 4.41074e-05, 0.193551),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
}
point_count = 13

[sub_resource type="CylinderMesh" id="CylinderMesh_r54g3"]

[node name="light_shafts_example" type="Node3D"]

[node name="world_env" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_t70p2")

[node name="dummy_light" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.913216, -0.0556656, -0.403655, -0.40452, 0.00475196, 0.914517, -0.048989, 0.998438, -0.0268574, -0.266114, 4.91018, 0)
visible = false
light_bake_mode = 0

[node name="main_light" type="SpotLight3D" parent="."]
transform = Transform3D(-0.190371, 0.886816, -0.42109, -0.0316435, 0.423168, 0.905499, 0.981202, 0.185705, -0.052497, -4.72378, 14.2762, -0.497378)
visible = false
light_color = Color(1, 0.959959, 0.740909, 1)
light_energy = 3.0
light_indirect_energy = 2.0
light_bake_mode = 1
spot_range = 25.0
spot_attenuation = 0.0
spot_angle = 10.0
spot_angle_attenuation = 0.0647041

[node name="remote_transform_3d" type="RemoteTransform3D" parent="main_light"]
visible = false
remote_path = NodePath("../../light_shaft_3d/origin")
update_rotation = false
update_scale = false

[node name="lightmap_gi" type="LightmapGI" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.831257, 0)
bounces = 8
denoiser_range = 20
environment_mode = 3
environment_custom_energy = 0.05
light_data = ExtResource("1_qtan3")

[node name="room" type="MeshInstance3D" parent="."]
transform = Transform3D(0.998146, 0, -0.0608569, 0, 1, 0, 0.0608569, 0, 0.998146, 0, 0, 0)
mesh = SubResource("ArrayMesh_bed4n")

[node name="light_shaft_3d" type="MeshInstance3D" parent="." node_paths=PackedStringArray("outline", "origin")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.49556, 3.85103, 0)
mesh = SubResource("ArrayMesh_tgovr")
script = SubResource("GDScript_pnruy")
length = 4.646
outline = NodePath("outline")
origin = NodePath("origin")
metadata/_custom_type_script = "uid://bslqtjuwuelro"

[node name="outline" type="Path3D" parent="light_shaft_3d"]
transform = Transform3D(-0.627583, 0, -0.77855, 0, 1, 0, 0.77855, 0, -0.627583, -3.09362, 0, 0)
curve = SubResource("Curve3D_tgovr")
script = ExtResource("4_fac11")

[node name="origin" type="Marker3D" parent="light_shaft_3d"]
transform = Transform3D(-0.190371, 0.886816, -0.42109, -0.0316435, 0.423168, 0.905499, 0.981202, 0.185705, -0.0524969, -8.21934, 10.4252, -0.497378)
script = ExtResource("4_fac11")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.328569, 2.28381, -0.368264)
mesh = SubResource("CylinderMesh_r54g3")
